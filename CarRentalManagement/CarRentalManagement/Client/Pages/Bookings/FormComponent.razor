@inject HttpClient _client

<EditForm Model="@booking" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Vehcile:</label>
            <div>
                <select class="form-control" @bind="booking.VehicleId">
                    <option value="">-- Select Make --</option>
                    @if (this.Vehicles != null)
                    {
                        foreach (Vehicle vehicle in this.Vehicles)
                        {
    <option value="@vehicle.Id">@vehicle.Make.Name @vehicle.Model.Name | @vehicle.LicensePlateNumber</option>
}
}
                </select>
                <ValidationMessage For="@(() => booking.VehicleId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Customer:</label>
            <div>
                <select class="form-control" @bind="booking.CustomerId">
                    <option value="">-- Select Customer --</option>
                    @if (this.Customers != null)
                    {
                        foreach (Customer customer in this.Customers)
                        {
    <option value="@customer.Id">@customer.TaxId | @customer.EmailAddress</option>
}
}
                </select>
                <ValidationMessage For="@(() => booking.CustomerId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Data Out:</label>
            <div>
                <InputDate @bind-Value="@booking.DateOut" class="form-control" />
                <ValidationMessage For="@(() => booking.DateOut)" />
            </div>
        </div>

        @if (booking.Id > 0)
        {
    <div class="form-group">
        <label>Date In:</label>
        <div>
            <InputDate @bind-Value="@booking.DateIn" class="form-control" />
            <ValidationMessage For="@(() => booking.DateIn)" />
        </div>
    </div>}
    </fieldset>
    <button type="submit" class="btn btn-primary btn-block">@ButtonText</button>
    <BackToList Target="bookings" />
</EditForm>



@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Booking booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Vehicle> Vehicles;
    private IList<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {
        this.Vehicles = await _client.GetFromJsonAsync<IList<Vehicle>>(Endpoints.VehiclesEndpoint);
        this.Customers = await _client.GetFromJsonAsync<IList<Customer>>(Endpoints.CustomersEndpoint);
    }
}