@page "/vehicles/create/"

@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Vehicle</h3>
<hr />
<br />

<EditForm Model="@this.vehicle" OnValidSubmit="CreateVehicle">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Make:</label>
        <div>
            <select class="form-control" @bind="vehicle.MakeId">
                <option value="">-- Select Make --</option>
                @if (this.Makes != null)
                {
                    foreach (Make make in this.Makes)
                    {
                        <option value="@make.Id">@make.Name</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="form-group">
        <label>Model:</label>
        <div>
            <InputSelect class="form-control" @bind-Value="vehicle.ModelId">
                <option value="">-- Select Model --</option>
                @if (this.Models != null)
                {
                    foreach (Model model in this.Models)
                    {
                        <option value="@model.Id">@model.Name</option>
                    }
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group">
        <label>Colour:</label>
        <div>
            <select class="form-control" @bind="vehicle.ColourId">
                <option value="">-- Select Colour --</option>
                @if (this.Colours != null)
                {
                    foreach (Colour colour in this.Colours)
                    {
                        <option value="@colour.Id">@colour.Name</option>
                    }
                }
            </select>
        </div>
    </div>
</EditForm>

@code {
    Vehicle vehicle = new Vehicle();

    private IList<Make> Makes;
    private IList<Model> Models;
    private IList<Colour> Colours;

    protected async override Task OnInitializedAsync()
    {
        this.Makes  = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
        this.Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
        this.Colours = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");

    }

    private async Task CreateVehicle()
    {

    }
}