@inject HttpClient _client

<EditForm Model="@this.vehicle" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Make:</label>
        <div>
            <select class="form-control" @bind="vehicle.MakeId">
                <option value="">-- Select Make --</option>
                @if (this.Makes != null)
                {
                    foreach (Make make in this.Makes)
                    {
                        <option value="@make.Id">@make.Name</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => vehicle.MakeId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Model:</label>
        <div>
            <InputSelect class="form-control" @bind-Value="vehicle.ModelId">
                <option value="">-- Select Model --</option>
                @if (this.Models != null)
                {
                    foreach (Model model in this.Models)
                    {
                        <option value="@model.Id">@model.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => vehicle.ModelId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Colour:</label>
        <div>
            <select class="form-control" @bind="vehicle.ColourId">
                <option value="">-- Select Colour --</option>
                @if (this.Colours != null)
                {
                    foreach (Colour colour in this.Colours)
                    {
                        <option value="@colour.Id">@colour.Name</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => vehicle.ColourId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Year:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@vehicle.Year" />
            <ValidationMessage For="@(() => vehicle.Year)" />

        </div>
    </div>
    <div class="form-group">
        <label>License Plate #:</label>
        <div>
            <InputText class="form-control" @bind-Value="@vehicle.LicensePlateNumber" />
            <ValidationMessage For="@(() => vehicle.LicensePlateNumber)" />

        </div>
    </div>
    <div class="form-group">
        <label>Vehicle ID #:</label>
        <div>
            <InputText class="form-control" @bind-Value="@vehicle.Vin" />
            <ValidationMessage For="@(() => vehicle.Vin)" />

        </div>
    </div>
    <div class="form-group">
        <label>Daily Rate:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@vehicle.RentalRate" />
            <ValidationMessage For="@(() => vehicle.RentalRate)" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary btn-block">Add Vehicle</button>
</EditForm>


@code {
    [Parameter] public Vehicle vehicle { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Make> Makes;
    private IList<Model> Models;
    private IList<Colour> Colours;


    protected async override Task OnInitializedAsync()
    {
        this.Makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
        this.Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
        this.Colours = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");

    }
}

